using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Server.Auth;
using Server.Models;
using Server.Helpers;
using Microsoft.EntityFrameworkCore;
using System.Security.Claims;
using Server.Services.Interfaces;

namespace Server.Controllers
{
    [ApiController]
    [Route("api/auth/refreshToken")]
    [Authorize]
    public class RefreshTokenController : Controller
    {
        private readonly ApplicationDbContext _db;
        private readonly IAuthLibrary _authLibrary;

        public RefreshTokenController(ApplicationDbContext db, IAuthLibrary authLibrary)
        {
            _db = db;
            _authLibrary = authLibrary;
        }

        [AllowAnonymous]
        [HttpPost]
        public async Task<IActionResult> RefreshToken()
        {
            // Get the refresh token from the header
            string? refreshToken = Request.Headers["refreshToken"];
            // Check if the refresh token is null or empty
            if (string.IsNullOrEmpty(refreshToken))
            {
                return BadRequest("Refresh token is required");
            }
            // Get the access token from the authorization header
            string? accessToken = Request.Headers["Authorization"].FirstOrDefault()?.Split(" ").Last();
            // Check if the access token is null or empty
            if (string.IsNullOrEmpty(accessToken))
            {
                return BadRequest("Access token is required");
            }

            AccessToken? oldAccessToken = await _db.AccessTokens.Where(a => a.Value == accessToken).FirstOrDefaultAsync();
            long rtIdFromCurrentAt = -1;
            if (oldAccessToken != null)
            {
                if (oldAccessToken.Revoked == true) return BadRequest("Access token is not valid");
                rtIdFromCurrentAt = oldAccessToken.RtId;
            }

            // Validate the access token
            var principal = _authLibrary.Validate(accessToken);
            if (principal == null)
            {
                return BadRequest("Invalid access token");
            }
            // Get the user's name from the access token claims
            string? username = principal.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value;
            // Check if the user's name is null or empty
            if (string.IsNullOrEmpty(username))
            {
                return BadRequest("Invalid username");
            }
            // Get the user from the database by name
            User? user = await _db.Users.FirstOrDefaultAsync(u => u.Username == username);
            // Check if the user exists
            if (user == null)
            {
                return NotFound("User not found");
            }

            // Get the refresh token from the database by value
            RefreshToken? oldRefreshToken = await _db.RefreshTokens.FirstOrDefaultAsync(r => r.Value == refreshToken);
            // Check if the refresh token exists
            if (oldRefreshToken == null)
            {
                return NotFound("Refresh token not found");
            }
            // Check if the refresh token is expired
            if (oldRefreshToken.ExpirationDate < DateTime.Now)
            {
                return BadRequest("Refresh token expired");
            }
            // Check if the refresh token is revoked
            if (oldRefreshToken.Revoked)
            {
                return BadRequest("Refresh token revoked");
            }
            // Check if the refresh token belongs to the same user as the access token
            if (oldRefreshToken.UserId != user.Id)
            {
                return BadRequest("Invalid refresh token");
            }
            // Check if the access token is generated by refresh token
            if (oldRefreshToken.Id != rtIdFromCurrentAt)
            {
                return BadRequest("Access Token not generated by Refresh Token or not exist");
            }

            // Generate a new access token and a new refresh token for the user
            var token = _authLibrary.Generate(user, false);
            if (token is string at)
            {
                string newAccessToken = at;

                var newAccessTokenEntity = new AccessToken()
                {
                    Value = newAccessToken,
                    RtId = oldRefreshToken.Id,
                    ExpirationDate = DateTime.Now.AddMinutes(2),
                    Revoked = false,
                };

                _db.AccessTokens.Add(newAccessTokenEntity);
                await _db.SaveChangesAsync();

                if (oldAccessToken != null)
                {
                    oldAccessToken.Revoked = true;
                    await _db.SaveChangesAsync();
                }

                ReturnToken returnToken = new()
                {
                    AccessToken = newAccessToken.ToString(),
                    RefreshToken = oldRefreshToken.Value,
                };

                return Ok(returnToken);
            }

            return BadRequest();
        }
    }
}